# MACROS

# Allowed ICMP types
icmp_types = "echoreq"

# LAN 0
lan0_if = bge0
lan0_vif = carp0

# LAN 1
lan1_if = vlan10
lan1_vif = carp10

# LAN 2
lan2_if = vlan20
lan2_vif = carp20

# SFR SDSL
wan1_if = vlan110
wan1_vif1 = carp110
wan1_vif2 = carp111
wan1_vif3 = carp112
wan1_vif4 = carp113
wan1_nat_pool = "143.8.187.104/30"
wan1_gw = 109.3.187.97

# SFR ADSL
wan2_if = vlan120
wan2_vif1 = carp120
wan2_vif2 = carp121
wan2_vif3 = carp122
wan2_vif4 = carp123
wan2_nat_pool = "192.168.12.8/30"
wan2_gw = 192.168.12.15

# FT ADSL
wan3_if = vlan130
wan3_vif1 = carp130
wan3_vif2 = carp131
wan3_vif3 = carp132
wan3_vif4 = carp133
wan3_nat_pool = "192.168.13.8/30"
wan3_gw = 192.168.13.15

# DMZ 1
dmz1_if = vlan210
dmz1_vif = carp210

# DMZ 2
dmz2_if = vlan220
dmz2_vif = carp220

# FW interconnection
int1_if = vlan310
pfs_if = $int1_if

# All Traffic Interfaces
all_if = "{" $lan0_if $lan1_if $lan2_if $wan1_if $wan2_if $wan3_if $dmz1_if $dmz2_if "}"
all_lan_if = "{" $lan0_if $lan1_if $lan2_if "}"
all_dmz_if = "{" $dmz1_if $dmz2_if "}"
all_private_if = "{" $lan0_if $lan1_if $lan2_if $dmz1_if $dmz2_if "}"
all_public_if = "{" $wan1_if $wan2_if $wan3_if "}"

# LISTS
table <rfc1918_nets> { 127.0.0.0/8, 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16 } const persist
table <wan2_nets> { 127.0.0.0/8, 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, !192.168.12.0/24 } const persist
table <wan3_nets> { 127.0.0.0/8, 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, !192.168.13.0/24 } const persist
table <apple_sub> { 17.152.19.125, 17.152.19.127, 17.152.249.51, 17.152.249.52, 17.152.249.53, 17.152.249.54, 17.152.249.55, 17.152.249.56, 17.152.249.57, 17.152.249.58, 17.172.190.141, 17.172.190.142, 17.172.190.143, 17.172.190.144, 17.172.190.145, 17.172.190.146, 17.172.190.147, 17.172.190.148, 17.152.249.101, 17.152.249.102, 17.152.249.103, 17.152.249.104, 17.152.249.105, 17.152.249.106, 17.152.249.107, 17.152.249.108, 17.172.190.101, 17.172.190.102, 17.172.190.103, 17.172.190.104, 17.172.190.105, 17.172.190.106, 17.172.190.107, 17.172.190.108 } const persist
table <readynas> { 192.168.1.202, 192.168.1.203 } const persist
table <rim> { www.rim.net } const persist
# FYI: nslookup -q=TXT _netblocks.google.com 8.8.8.8
table <google> { 216.239.32.0/19 64.233.160.0/19 66.249.80.0/20 72.14.192.0/18 209.85.128.0/17 66.102.0.0/20 74.125.0.0/16 64.18.0.0/20 207.126.144.0/20 173.194.0.0/16 } const persist
table <opendns> { 208.67.222.222, 208.67.220.220 } const persist
table <dmz1_dns> { 192.168.21.16, 192.168.21.17 } const persist
#table <dmz1_dns> { 192.168.21.16, 192.168.21.17, 192.168.21.18 } const persist
table <dmz1_proxy> { 192.168.21.21, 192.168.21.22, 192.168.21.23, 192.168.21.26, 192.168.21.27, 192.168.21.30 } const persist
#table <dmz1_proxy> { 192.168.21.19, 192.168.21.21, 192.168.21.22, 192.168.21.23 } const persist
table <dmz1_proxy_priority> { 192.168.21.23, 192.168.21.24, 192.168.21.25, 192.168.21.28, 192.168.21.29 } const persist
table <unlimited> { 192.168.1.53, 192.168.1.134, 192.168.1.139, 192.168.1.140, 192.168.1.4, 192.168.1.128 } const persist
table <devservers> { 192.168.1.160, 192.168.1.161, 192.168.1.162 } const persist

# OPTIONS
set block-policy return
set debug info
#set fingerprints <file>
#set hostid
#set limit 
set loginterface $lan1_if
#set optimization conservative # default normal
set optimization aggressive # default normal
#set optimization normal
#set reassemble yes
#set ruleset-optimization basic
#set state-defaults
#set state-policy
#set timeout
set skip on lo

# QUEUING

# define queues

altq on $wan1_if cbq bandwidth 8Mb qlimit 500 queue { wan1_std, wan1_ssh, wan1_ftp }
queue wan1_std bandwidth 50% qlimit 500 cbq(default) { wan1_std_dns }
        queue wan1_std_dns bandwidth 20% qlimit 500 priority 6 cbq(borrow)
queue wan1_ssh bandwidth 25% qlimit 500 cbq(borrow) { wan1_ssh_login, wan1_ssh_bulk }
        queue wan1_ssh_login bandwidth 25% qlimit 500 priority 5 cbq(borrow, ecn)
        queue wan1_ssh_bulk bandwidth 75% qlimit 500 priority 4 cbq(borrow, ecn)
queue wan1_ftp bandwidth 25% qlimit 500 priority 3 cbq(borrow red)

altq on { $wan2_if, $wan3_if } cbq bandwidth 1Mb qlimit 500 queue { std, ssh, ftp }
queue std bandwidth 50% qlimit 500 cbq(default borrow) { std_dns }
        queue std_dns bandwidth 20% qlimit 500 priority 6 cbq(borrow)
queue ssh bandwidth 25% qlimit 500 cbq(borrow) { ssh_login, ssh_bulk }
        queue ssh_login bandwidth 25% qlimit 500 priority 5 cbq(ecn)
        queue ssh_bulk bandwidth 75% qlimit 500 priority 4 cbq(ecn)
queue ftp bandwidth 25% qlimit 500 priority 3 cbq(borrow red)

# match traffic for queues

match out on $wan1_if proto { tcp, udp } from any to any port domain queue wan1_std_dns
match out on $wan1_if proto tcp from any to any port ssh queue ( wan1_ssh_bulk, wan1_ssh_login )
match out on $wan1_if proto tcp from any to any port { ftp, ftp-data, 990 } queue wan1_ftp

match out on { $wan2_if, $wan3_if } proto { tcp, udp } from any to any port domain queue std_dns
match out on { $wan2_if, $wan3_if } proto tcp from any to any port ssh queue ( ssh_bulk, ssh_login )
match out on { $wan2_if, $wan3_if } proto tcp from any to any port { ftp, ftp-data, 990 } queue ftp

# NAT

#match out on $wan1_if from ($lan0_if:network) nat-to $wan1_nat_pool source-hash
#match out on $wan2_if from ($lan0_if:network) nat-to $wan2_nat_pool source-hash
#match out on $wan3_if from ($lan0_if:network) nat-to $wan3_nat_pool source-hash
#match out on $wan1_if from ($lan1_if:network) nat-to $wan1_nat_pool source-hash
#match out on $wan2_if from ($lan1_if:network) nat-to $wan2_nat_pool source-hash
#match out on $wan3_if from ($lan1_if:network) nat-to $wan3_nat_pool source-hash
#match out on $wan1_if from ($lan2_if:network) nat-to $wan1_nat_pool source-hash
#match out on $wan2_if from ($lan2_if:network) nat-to $wan2_nat_pool source-hash
#match out on $wan3_if from ($lan2_if:network) nat-to $wan3_nat_pool source-hash
#match out on $wan1_if from ($dmz1_if:network) nat-to $wan1_nat_pool source-hash
#match out on $wan2_if from ($dmz1_if:network) nat-to $wan2_nat_pool source-hash
#match out on $wan3_if from ($dmz1_if:network) nat-to $wan3_nat_pool source-hash
#match out on $wan1_if from ($dmz2_if:network) nat-to $wan1_nat_pool source-hash
#match out on $wan2_if from ($dmz2_if:network) nat-to $wan2_nat_pool source-hash
#match out on $wan3_if from ($dmz2_if:network) nat-to $wan3_nat_pool source-hash

#match out log on $wan1_if from ($lan0_if:network) nat-to ($wan1_if)
#match out log on $wan2_if from ($lan0_if:network) nat-to ($wan2_if)
#match out log on $wan3_if from ($lan0_if:network) nat-to ($wan3_if)
#match out log on $wan1_if from ($lan1_if:network) nat-to ($wan1_if)
#match out log on $wan2_if from ($lan1_if:network) nat-to ($wan2_if)
#match out log on $wan3_if from ($lan1_if:network) nat-to ($wan3_if)
#match out log on $wan1_if from ($lan2_if:network) nat-to ($wan1_if)
#match out log on $wan2_if from ($lan2_if:network) nat-to ($wan2_if)
#match out log on $wan3_if from ($lan2_if:network) nat-to ($wan3_if)
#match out log on $wan1_if from ($dmz1_if:network) nat-to ($wan1_if)
#match out log on $wan2_if from ($dmz1_if:network) nat-to ($wan2_if)
#match out log on $wan3_if from ($dmz1_if:network) nat-to ($wan3_if)
#match out log on $wan1_if from ($dmz2_if:network) nat-to ($wan1_if)
#match out log on $wan2_if from ($dmz2_if:network) nat-to ($wan2_if)
#match out log on $wan3_if from ($dmz2_if:network) nat-to ($wan3_if)

#match out log on $wan1_if from !($wan1_if) nat-to ($wan1_if)
#match out log on $wan2_if from !($wan2_if) nat-to ($wan2_if)
#match out log on $wan3_if from !($wan3_if) nat-to ($wan3_if)

#match out log on $wan1_if from !($wan1_if) to !<rfc1918> nat-to $wan1_nat_pool source-hash
#match out log on $wan2_if from !($wan2_if) to !<wan2_nets> nat-to $wan2_nat_pool source-hash
#match out log on $wan3_if from !($wan3_if) to !<wan3_nets> nat-to $wan3_nat_pool source-hash

match out log on $wan1_if from !($wan1_if) nat-to $wan1_nat_pool source-hash
match out log on $wan2_if from !($wan2_if) nat-to $wan2_nat_pool source-hash
match out log on $wan3_if from !($wan3_if) nat-to $wan3_nat_pool source-hash

# FILTER

##############################################
# DEFAULT FILTERING RULES
##############################################

# Default on all interfaces
# Block (and apply block-policy) by default
#block all
block log all

# Block drop on all public interfaces
#block drop on $all_public_if
block drop log on $all_public_if

# TODO: Block and drop all broadcast traffic
#block drop on 

# Allow all outgoing traffic. Do filtering on incoming packets
pass out log keep state (pflow)

# Antispoof rules
antispoof for lo0
antispoof for $all_if

# Deny from all networks except those defined on interfaces
block in log quick on $lan0_if from !($lan0_if:network)
block in log quick on $lan1_if from !($lan1_if:network)
block in log quick on $lan2_if from !($lan2_if:network)
block in log quick on $wan1_if from !($wan1_if:network)
block in log quick on $wan2_if from !($wan2_if:network)
block in log quick on $wan3_if from !($wan3_if:network)
block in log quick on $dmz1_if from !($dmz1_if:network)
block in log quick on $dmz2_if from !($dmz2_if:network)

# Allow pfsync quick
pass quick on $pfs_if proto pfsync keep state (no-sync)

# Allow carp quick
pass quick on $all_if proto carp keep state (no-sync)

# Allow All Authorized ICMP types on all interfaces
pass in inet proto icmp all icmp-type $icmp_types
pass out inet proto icmp all icmp-type $icmp_types
pass in inet proto udp to port 33433 >< 33626
pass out inet proto udp to port 33433 >< 33626

### Firewall Exceptions Anchor ###
# Steam
anchor games in on $lan0_if
load anchor games from "/etc/pf-games-nok.conf"

###
# TEMPORARY ALLOW JADE PROJECT FOR AMO AND SDI
###
pass in log on $lan0_if proto tcp from ($lan0_if:network) to 46.105.127.50 port { 80, 443 }

# ALLOW UNLIMITED
pass in log on $lan0_if from <unlimited> to !<rfc1918_nets>
pass in log on $lan0_if from <devservers> to !<rfc1918_nets> route-to ( $wan1_if $wan1_gw )
#pass in log on $lan0_if from 192.168.1.128 to !<rfc1918_nets> route-to ( $wan1_if $wan1_gw )
# Allow Hamachi
pass in log on $lan0_if proto tcp from 192.168.1.128 to !<rfc1918_nets> port { 12975, 32976 } route-to ( $wan1_if $wan1_gw )
pass in log on $lan0_if proto udp from 192.168.1.128 to !<rfc1918_nets> port 17771 route-to ( $wan1_if $wan1_gw )

### 
# SSH RULES
###

# Allow SSH from LAN0 to FIREWALL
pass in log proto tcp from ($lan0_if:network) to ($lan0_if) port ssh

# Allow SSH from LAN0 to DMZ1 and DMZ2
pass in log on $lan0_if proto tcp from ($lan0_if:network) to { ($dmz1_if:network), ($dmz2_if:network) } port ssh

# Allow SSH from LAN0 to INTERNET route to SDSL
pass in log on $lan0_if proto tcp from any to !<rfc1918_nets> port ssh route-to ( $wan1_if $wan1_gw )

# Allow SSH from LAN0 to LAN1 DHCP server
pass in log on $lan0_if proto tcp from ($lan0_if:network) to 192.168.10.5 port ssh

# Allow SSH from ftpmanager to FTP server
pass in log on $dmz1_if proto tcp from 192.168.21.13 to 176.34.254.255 port ssh

###
# DOMAIN RULES
###

# Allow DOMAIN from BULKYSRV01 to DNS Servers
pass in log on $lan0_if proto { tcp, udp } from 192.168.1.2 to <dmz1_dns> port domain

# Allow DOMAIN from DNS Servers to !RFC1918 route to SDSL
pass in log on $dmz1_if proto { tcp, udp } from <dmz1_dns> to !<rfc1918_nets> port domain route-to ( $wan1_if $wan1_gw )
#pass in log on $dmz1_if proto { tcp, udp } from <dmz1_dns> to !<rfc1918_nets> port domain

# Allow DOMAIN from LAN1 DHCP Server to DNS Servers
pass in log on $lan1_if proto { tcp, udp } from 192.168.10.5 to <dmz1_dns> port domain


###
# PROXY ( HTTP(S) / FTP )
###

# Allow HTTP from LAN0 to PROXIES
pass in log on $lan0_if proto tcp from ($lan0_if:network) to <dmz1_proxy> port http

# Allow HTTP from LAN1 to PROXIES
pass in log on $lan1_if proto tcp from ($lan1_if:network) to <dmz1_proxy> port http

# Allow SQUID3 from LAN0 to PROXIES
pass in log on $lan0_if proto tcp from ($lan0_if:network) to <dmz1_proxy> port 3128

# Allow SQUID3 from LAN1 to PROXIES
pass in log on $lan1_if proto tcp from ($lan1_if:network) to <dmz1_proxy> port 3128

# Allow ALL from PROXIES to ANY
pass in log on $dmz1_if proto tcp from <dmz1_proxy> to !<rfc1918_nets>

# Allow ALL from PRIORITY PROXIES to ANY route to SDSL
pass in log on $dmz1_if proto tcp from <dmz1_proxy_priority> to !<rfc1918_nets> route-to ( $wan1_if $wan1_gw )
#pass in log on $dmz1_if proto tcp from <dmz1_proxy_priority> to !<rfc1918_nets> route-to ( $wan3_if $wan3_gw )
#pass in log on $dmz1_if proto tcp from <dmz1_proxy_priority> to !<rfc1918_nets>

# Allow NTP (123) from PROXIES to BULKYSRV01
pass in log on $dmz1_if proto { tcp, udp } from <dmz1_proxy> to 192.168.1.2 port ntp

# Allow AD SMB (445) from PROXIES to BULKYSRV01
pass in log on $dmz1_if proto tcp from <dmz1_proxy> to 192.168.1.2 port microsoft-ds

# Allow Active Directory Kerberos (88, 464, 750) from PROXIES to BULKYSRV01
pass in log on $dmz1_if proto { tcp, udp } from <dmz1_proxy> to 192.168.1.2 port { kerberos, kerberos-iv, kpasswd }

# Allow LDAP(S) from PROXIES to BULKYSRV01
pass in log on $dmz1_if proto { tcp, udp } from <dmz1_proxy> to 192.168.1.2 port { ldap, ldaps }

# Allow Google Bypass
pass in log on $lan0_if proto tcp from ($lan0_if:network) to <google> port { http, https } route-to ( $wan1_if $wan1_gw )

# Transparent Redirect
#pass in log on $lan0_if proto tcp from 192.168.1.128 to !<rfc1918_nets> port http rdr-to 192.168.21.26 port 3128

###
# MAIL
###

# Allow POP(S) / IMAP(S)
pass in log on $lan0_if proto tcp from ($lan0_if:network) to any port { pop3s, imap, imaps } route-to ( $wan1_if $wan1_gw )
# Allow POP(S) / IMAP(S)
#pass in log on $lan0_if proto tcp from ($lan0_if:network) to any port { pop3s, imap, imaps }

# Allow SMTP / Submission
pass in log on $lan0_if proto tcp from ($lan0_if:network) to any port { smtps, submission } route-to ( $wan1_if $wan1_gw )
# Allow SMTP / Submission
#pass in log on $lan0_if proto tcp from ($lan0_if:network) to any port { smtps, submission }

#Allow Server SMTP
pass in log on $lan0_if proto tcp from 192.168.1.3 to any port smtp route-to ( $wan1_if $wan1_gw )

###
# FTP
###

# Allow FTP from PROXIES to ftp route to SDSL
pass in log on $dmz1_if proto tcp from <dmz1_proxy_priority> to 176.34.254.255 route-to ( $wan1_if $wan1_gw )
# Allow FTP from ANY to ftp route to SDSL
pass in log on $lan0_if proto tcp from ($lan0_if:network) to 176.34.254.255 route-to ( $wan1_if $wan1_gw )

# Allow FTP from PROXIES to ftp route to SDSL
#pass in log on $dmz1_if proto tcp from <dmz1_proxy_priority> to 176.34.254.255
# Allow FTP from ANY to ftp route to SDSL
#pass in log on $lan0_if proto tcp from ($lan0_if:network) to 176.34.254.255

###
# NTP
###

# Allow NTP from LAN0
pass in log on $lan0_if proto { udp, tcp } from ($lan0_if:network) to any port ntp

###
# VPN
###

# Allow ESP protocol from bastien to vpn
#pass in log on $lan0_if proto esp from 192.168.1.137 to 192.168.21.14
pass in log on $lan0_if proto esp from 192.168.1.137 to ($lan0_if) rdr-to 192.168.21.14 

# Allow ISAKMPD from bastien to vpn
#pass in log on $lan0_if proto udp from 192.168.1.137 to 192.168.21.14 port 500
pass in log on $lan0_if proto udp from 192.168.1.137 to ($lan0_if) port 500 rdr-to 192.168.21.14

# Allow L2TP from bastien to vpn
#pass in log on $lan0_if proto udp from 192.168.1.137 to 192.168.21.14 port 1701
pass in log on $lan0_if proto udp from 192.168.1.137 to ($lan0_if) port 1701 rdr-to 192.168.21.14

# Allow IPSEC-NAT-T from bastien to vpn
#pass in log on $lan0_if proto udp from 192.168.1.137 to 192.168.21.14 port 4500
pass in log on $lan0_if proto udp from 192.168.1.137 to ($lan0_if) port 4500 rdr-to 192.168.21.14

###
# INTRANET WEB SERVER (wiki / forums && ftpmanager/monitoring)
###

# Allow HTTP(S) from INTRANETSERVER to BULKYSRV01
pass in log on $lan0_if proto tcp from ($lan0_if:network) to { 192.168.21.31, 192.168.21.13 } port { http, https }

# Allow LDAP from INTRANETSERVER to BULKYSRV01
pass in log on $dmz1_if proto { tcp, udp } from { 192.168.21.31, 192.168.21.13 } to 192.168.1.2 port ldap

###
# ADSL LIVEBOX CONFIGURATION
###
pass in log on $lan0_if proto tcp from ($lan0_if:network) to 192.168.13.15 port http

###
# APPLE SUBMISSIONS
###

# Allow specific traffic routed through SDSL
pass in on $lan0_if from ($lan0_if:network) to <apple_sub> route-to ( $wan1_if $wan1_gw )
pass in on $dmz1_if from ($dmz1_if:network) to <apple_sub> route-to ( $wan1_if $wan1_gw )
#pass in on $lan0_if from ($lan0_if:network) to <apple_sub>
#pass in on $dmz1_if from ($dmz1_if:network) to <apple_sub>

# ALLOW READYNAS

# Allow readynas Internet Access through SDSL
pass in on $lan0_if from <readynas> to !<rfc1918_nets> route-to ( $wan1_if $wan1_gw )

###
# RIM SIGNING
###

pass in on $lan0_if proto tcp from ($lan0_if:network) to <rim> port { http, https } route-to ( $wan1_if $wan1_gw )
#pass in on $lan0_if proto tcp from ($lan0_if:network) to <rim> port { http, https }

###
# Allow CANON PRINTER SMTP ACCESS
###
pass in on $lan0_if proto tcp from 192.168.1.101 to !<rfc1918_nets> port smtp route-to ( $wan1_if $wan1_gw )

###
# Allow SNMP traffic between gw and bpx-lnx-mon-01
###
pass in log proto udp from 192.168.21.13 to ($lan0_if:network) port=161

###
# Allow Steam Traffic
###
#anchor "steam" {
#	pass in log on $lan0_if proto udp from ($lan0_if:network) to any port 27000:27030
#	pass in log on $lan0_if proto tcp from ($lan0_if:network) to any port 27014:27050
#	pass in log on $lan0_if proto udp from ($lan0_if:network) to any port 4380
#}

###
# Specific rules
###

